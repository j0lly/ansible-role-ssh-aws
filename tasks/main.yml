---
- name: Add the OS specific variables
  include_vars: "{{ ansible_distribution }}.yml"

- name: 'Ensure EPEL installed'
  yum: pkg=epel-release state=installed
# Causes an error if we try and which something that doesn't exist so use this
# as a workaround.
- name: Check to see if pip is already installed.
  command: "pip --version"
  ignore_errors: true
  changed_when: false # read-only task
  check_mode: no
  register: pip_is_installed
- name: 'Ensure Python PIP installed'
  yum: pkg={{ ssh_aws_pip_version }} state=installed
  when: pip_is_installed.rc != 0
- name: 'Ensure AWS CLI installed'
  pip: name=awscli state=present
- name: 'Ensure ssh installed'
  yum: pkg=openssh-server state=installed
- name: 'Start sshd'
  service: name=sshd state=started
- name: 'Ensure cron installed'
  yum: pkg=cronie state=installed

- name: ensure AuthorizedKeysCommandUser in sshd_config
  lineinfile:
    dest: /etc/ssh/sshd_config
    state: present
    regexp: '.*(AuthorizedKeysCommandUser) .*'
    line: 'AuthorizedKeysCommandUser {{ ssh_aws_user }}'
    validate: '/usr/sbin/sshd -T -f %s'
  notify:
  - "sshd changed"
- name: ensure AuthorizedKeysCommand in sshd_config
  lineinfile:
    dest: /etc/ssh/sshd_config
    state: present
    regexp: '^.*(AuthorizedKeysCommand) .*'
    line: 'AuthorizedKeysCommand {{ ssh_aws_authkey_command_path }}'
    validate: '/usr/sbin/sshd -T -f %s'
  notify:
  - "sshd changed"
- name: copy import_user.sh
  copy:
    src: files/import_users.sh
    dest: "{{ ssh_aws_import_user_path }}"
    owner: root
    group: root
    mode: 0755
- name: copy AuthorizedKeysCommand script
  copy:
    src: files/authorized_key_command.sh
    dest: "{{ ssh_aws_authkey_command_path }}"
    owner: root
    group: root
    mode: 0755
- name: import_users cron
  cron:
    name: import_users cron
    minute: "*/5"
    user: root
    job: "{{ ssh_aws_import_user_path }}"
    cron_file: import_users
    state: present
  notify:
  - "sync users"
